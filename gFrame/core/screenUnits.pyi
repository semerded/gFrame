from ..baseImporter import vars
from ..enums import aspectRatios
from .rect import Rect
from typing_extensions import overload

class ScreenUnit:
    def percent(parentSize: vars.validScreenUnit, percent: int | float) -> int | float: ...
    
    def dw(screenUnit: vars.validScreenUnit) -> vars.validScreenUnit: ...
    def dh(screenUnit: vars.validScreenUnit) -> vars.validScreenUnit: ...
    def vw(screenUnit: vars.validScreenUnit) -> vars.validScreenUnit: ...
    def vh(screenUnit: vars.validScreenUnit) -> vars.validScreenUnit: ...
    def px(screenUnit: int) -> int: ...
    
    def getVwFromPx(xPixel: int) -> vars.validScreenUnit: ...
    def getVhFromPx(yPixel: int) -> vars.validScreenUnit: ...
    
    def getRelativePostion(coordinate: vars.coordinate) -> tuple[vars.validScreenUnit]: ...
    
    def aspectRatioFromInt(xRatio: int, yRatio: int) -> vars.validScreenUnit: ...
    def aspectRatioFromString(aspectRatio: str | aspectRatios) -> vars.validScreenUnit: ...
    
    def checkIfValidScreenUnit(screenUnit) -> vars.validScreenUnit: ...
    def convertMultipleUnits(*screenUnit) -> list[vars.validScreenUnit]: ...
    
    def centerOfScreen() -> tuple[vars.validScreenUnit]: ...
    
    @overload
    def centerRectInScreen(rect: Rect) -> tuple[vars.validScreenUnit]: ...
    @overload
    def centerRectInScreen(width: vars.validScreenUnit, height: vars.validScreenUnit) -> tuple[vars.validScreenUnit]: ...
